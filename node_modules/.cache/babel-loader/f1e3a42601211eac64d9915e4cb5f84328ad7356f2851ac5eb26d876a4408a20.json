{"ast":null,"code":"var _jsxFileName = \"/home/kaisj/projects/xflynx25.github.io/react_gitweb/src/components/Hangman.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../stylesheets/Hangman.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Hangman(_ref) {\n  _s();\n  let {\n    word\n  } = _ref;\n  const [guesses, setGuesses] = useState(new Set());\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0);\n\n  // Split the word into an array of letters and spaces\n  const wordArray = word.split('');\n\n  // Map over the word array and display each letter or space\n  const displayArray = wordArray.map((letter, index) => {\n    if (letter === ' ') {\n      // Display spaces as non-interactable elements\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" \"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 14\n      }, this);\n    } else if (guesses.has(letter)) {\n      // Display guessed letters\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: letter\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 14\n      }, this);\n    } else {\n      // Display underscores for unguessed letters\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"_\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 14\n      }, this);\n    }\n  });\n\n  // Check if the player has won (all letters have been guessed)\n  const hasWon = wordArray.every(letter => guesses.has(letter) || letter === ' ');\n\n  // Check if the player has lost (exceeded maximum incorrect guesses)\n  const hasLost = incorrectGuesses >= 5;\n\n  // Define the hangman ASCII art\n  const hangmanArt = ['_______', '|      |', '|      O', '|     /|\\\\', '|     / \\\\', '|'];\n\n  // Slice the hangman art to show only the relevant body parts\n  const visibleHangman = hangmanArt.slice(0, incorrectGuesses + 1).join('\\n');\n\n  // Handle a player's guess\n  const handleGuess = letter => {\n    // Ignore duplicate guesses\n    if (guesses.has(letter)) {\n      return;\n    }\n\n    // Add the guess to the set of guesses\n    const newGuesses = new Set(guesses);\n    newGuesses.add(letter);\n    setGuesses(newGuesses);\n\n    // Increment the number of incorrect guesses if the guess is incorrect\n    if (!wordArray.includes(letter)) {\n      setIncorrectGuesses(incorrectGuesses + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hangman-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-word\",\n      children: displayArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-art\",\n      children: visibleHangman\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), !hasWon && !hasLost && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: \"1\",\n        onChange: e => handleGuess(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), hasWon && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 18\n    }, this), hasLost && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You lose!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Hangman, \"DTH+J76mBduxA1K9j8NSOmN+yl8=\");\n_c = Hangman;\nexport default Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Hangman","_ref","_s","word","guesses","setGuesses","Set","incorrectGuesses","setIncorrectGuesses","wordArray","split","displayArray","map","letter","index","children","fileName","_jsxFileName","lineNumber","columnNumber","has","hasWon","every","hasLost","hangmanArt","visibleHangman","slice","join","handleGuess","newGuesses","add","includes","className","type","maxLength","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/home/kaisj/projects/xflynx25.github.io/react_gitweb/src/components/Hangman.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../stylesheets/Hangman.css';\n\nfunction Hangman({ word }) {\n  const [guesses, setGuesses] = useState(new Set());\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0);\n\n  // Split the word into an array of letters and spaces\n  const wordArray = word.split('');\n\n  // Map over the word array and display each letter or space\n  const displayArray = wordArray.map((letter, index) => {\n    if (letter === ' ') {\n      // Display spaces as non-interactable elements\n      return <span key={index}> </span>;\n    } else if (guesses.has(letter)) {\n      // Display guessed letters\n      return <span key={index}>{letter}</span>;\n    } else {\n      // Display underscores for unguessed letters\n      return <span key={index}>_</span>;\n    }\n  });\n\n  // Check if the player has won (all letters have been guessed)\n  const hasWon = wordArray.every((letter) => guesses.has(letter) || letter === ' ');\n\n  // Check if the player has lost (exceeded maximum incorrect guesses)\n  const hasLost = incorrectGuesses >= 5;\n\n  // Define the hangman ASCII art\n  const hangmanArt = [\n    '_______',\n    '|      |',\n    '|      O',\n    '|     /|\\\\',\n    '|     / \\\\',\n    '|',\n  ];\n\n  // Slice the hangman art to show only the relevant body parts\n  const visibleHangman = hangmanArt.slice(0, incorrectGuesses + 1).join('\\n');\n\n  // Handle a player's guess\n  const handleGuess = (letter) => {\n    // Ignore duplicate guesses\n    if (guesses.has(letter)) {\n      return;\n    }\n\n    // Add the guess to the set of guesses\n    const newGuesses = new Set(guesses);\n    newGuesses.add(letter);\n    setGuesses(newGuesses);\n\n    // Increment the number of incorrect guesses if the guess is incorrect\n    if (!wordArray.includes(letter)) {\n      setIncorrectGuesses(incorrectGuesses + 1);\n    }\n  };\n\n  return (\n    <div className=\"hangman-container\">\n      <div className=\"hangman-word\">{displayArray}</div>\n      <div className=\"hangman-art\">{visibleHangman}</div>\n      {!hasWon && !hasLost && (\n        <div className=\"hangman-input-container\">\n          <input type=\"text\" maxLength=\"1\" onChange={(e) => handleGuess(e.target.value)} />\n        </div>\n      )}\n      {hasWon && <p>You win!</p>}\n      {hasLost && <p>You lose!</p>}\n    </div>\n  );\n}\n\nexport default Hangman;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}