{"ast":null,"code":"var _jsxFileName = \"/home/kaisj/projects/xflynx25.github.io/react_gitweb/src/components/Hangman.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../stylesheets/Hangman.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Hangman(_ref) {\n  _s();\n  let {\n    word\n  } = _ref;\n  const [guesses, setGuesses] = useState(new Set());\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0);\n  const [guessedLetters, setGuessedLetters] = useState('');\n\n  // Split the word into an array of letters and spaces\n  const wordArray = word.toLowerCase().split('');\n  console.log(wordArray);\n\n  // Map over the word array and display each letter or space\n  const displayArray = wordArray.map((letter, index) => {\n    if (letter === ' ') {\n      // Display spaces as non-interactable elements\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" \"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }, this);\n    } else if (guesses.has(letter)) {\n      // Display guessed letters\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: letter\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 14\n      }, this);\n    } else {\n      // Display underscores for unguessed letters\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"_\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }, this);\n    }\n  });\n\n  // Check if the player has won (all letters have been guessed)\n  const hasWon = wordArray.every(letter => guesses.has(letter) || letter === ' ');\n\n  // Check if the player has lost (exceeded maximum incorrect guesses)\n  const hasLost = incorrectGuesses >= 5;\n\n  // Define the hangman ASCII art\n  const hangmanArt = ['_______', '|      |', '|      O', ' |     /|\\\\', ' |     / \\\\', '|       '];\n\n  // Slice the hangman art to show only the relevant body parts\n  const visibleHangman = hangmanArt.slice(0, incorrectGuesses + 1).join('\\n');\n\n  // Handle a player's guess\n  const handleGuess = event => {\n    // Ignore duplicate guesses\n    const letter = event.key.toLowerCase();\n    if (guesses.has(letter)) {\n      return;\n    }\n\n    // Add the guess to the set of guesses\n    const newGuesses = new Set(guesses);\n    newGuesses.add(letter);\n    setGuesses(newGuesses);\n\n    // Increment the number of incorrect guesses if the guess is incorrect\n    if (!wordArray.includes(letter)) {\n      setIncorrectGuesses(incorrectGuesses + 1);\n    }\n\n    // Convert the Set of guessed letters to a string\n    const guessedLettersString = Array.from(newGuesses).join('');\n    setGuessedLetters(guessedLettersString);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hangman-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-art\",\n      children: visibleHangman\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"middle-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stack-middle\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-text\",\n          children: \"Was ist prompt?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guessed-letters\",\n          children: [\"Guessed letters: \", guessedLetters]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hangman-word\",\n        children: displayArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), !hasWon && !hasLost && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hangman-input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"hangman-input\",\n          type: \"text\",\n          maxLength: \"1\",\n          onKeyDown: e => e.key.length === 1 && handleGuess(e),\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), hasWon && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over-message win\",\n        children: \"You win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 20\n      }, this), hasLost && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over-message loss\",\n        children: \"You lose!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(Hangman, \"qSeS/SQssXhtLD7RAKwqUSWcP70=\");\n_c = Hangman;\nexport default Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Hangman","_ref","_s","word","guesses","setGuesses","Set","incorrectGuesses","setIncorrectGuesses","guessedLetters","setGuessedLetters","wordArray","toLowerCase","split","console","log","displayArray","map","letter","index","children","fileName","_jsxFileName","lineNumber","columnNumber","has","hasWon","every","hasLost","hangmanArt","visibleHangman","slice","join","handleGuess","event","key","newGuesses","add","includes","guessedLettersString","Array","from","className","type","maxLength","onKeyDown","e","length","autoFocus","_c","$RefreshReg$"],"sources":["/home/kaisj/projects/xflynx25.github.io/react_gitweb/src/components/Hangman.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../stylesheets/Hangman.css';\n\nfunction Hangman({ word }) {\n  const [guesses, setGuesses] = useState(new Set());\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0);\n  const [guessedLetters, setGuessedLetters] = useState('');\n\n  // Split the word into an array of letters and spaces\n  const wordArray = word.toLowerCase().split('');\n  console.log(wordArray)\n\n  // Map over the word array and display each letter or space\n  const displayArray = wordArray.map((letter, index) => {\n    if (letter === ' ') {\n      // Display spaces as non-interactable elements\n      return <span key={index}> </span>;\n    } else if (guesses.has(letter)) {\n      // Display guessed letters\n      return <span key={index}>{letter}</span>;\n    } else {\n      // Display underscores for unguessed letters\n      return <span key={index}>_</span>;\n    }\n  });\n\n  // Check if the player has won (all letters have been guessed)\n  const hasWon = wordArray.every((letter) => guesses.has(letter) || letter === ' ');\n\n  // Check if the player has lost (exceeded maximum incorrect guesses)\n  const hasLost = incorrectGuesses >= 5;\n\n  // Define the hangman ASCII art\n  const hangmanArt = [\n    '_______',\n    '|      |',\n    '|      O',\n    ' |     /|\\\\',\n    ' |     / \\\\',\n    '|       ',\n  ];\n\n  // Slice the hangman art to show only the relevant body parts\n  const visibleHangman = hangmanArt.slice(0, incorrectGuesses + 1).join('\\n');\n\n\n  // Handle a player's guess\n  const handleGuess = (event) => {\n    // Ignore duplicate guesses\n    const letter = event.key.toLowerCase();\n    if (guesses.has(letter)) {\n      return;\n    }\n\n    // Add the guess to the set of guesses\n    const newGuesses = new Set(guesses);\n    newGuesses.add(letter);\n    setGuesses(newGuesses);\n\n    // Increment the number of incorrect guesses if the guess is incorrect\n    if (!wordArray.includes(letter)) {\n      setIncorrectGuesses(incorrectGuesses + 1);\n    }\n\n    // Convert the Set of guessed letters to a string\n    const guessedLettersString = Array.from(newGuesses).join('');\n    setGuessedLetters(guessedLettersString);\n  };\n\n  return (\n    <div className=\"hangman-container\">\n      <div className=\"hangman-art\">{visibleHangman}</div>\n      <div className='middle-container'>\n        <div className='stack-middle'>\n            <div className=\"prompt-text\">Was ist prompt?</div> \n            <div className='guessed-letters'>Guessed letters: {guessedLetters}</div>\n        </div>\n        <div className=\"hangman-word\">\n        {displayArray}\n        </div>\n            {!hasWon && !hasLost && (\n                <div className=\"hangman-input-container\">\n                <input\n                    className=\"hangman-input\"\n                    type=\"text\"\n                    maxLength=\"1\"\n                    onKeyDown={(e) => e.key.length === 1 && handleGuess(e)}\n                    autoFocus\n                />\n                </div>\n        )}\n        {hasWon && <p className='game-over-message win'>You win!</p>}\n        {hasLost && <p className='game-over-message loss'>You lose!</p>}\n      </div>\n      <div></div>\n    </div>\n  );\n}\n\nexport default Hangman;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}