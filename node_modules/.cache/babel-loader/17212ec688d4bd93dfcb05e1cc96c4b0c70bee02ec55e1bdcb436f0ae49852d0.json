{"ast":null,"code":"import _slicedToArray from\"/home/kaisj/projects/react_gitweb/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import'../stylesheets/Hangman.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Hangman(_ref){var word=_ref.word;var _useState=useState(new Set()),_useState2=_slicedToArray(_useState,2),guesses=_useState2[0],setGuesses=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),incorrectGuesses=_useState4[0],setIncorrectGuesses=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),guessedLetters=_useState6[0],setGuessedLetters=_useState6[1];// Split the word into an array of letters and spaces\nvar wordArray=word.toLowerCase().split('');console.log(wordArray);// Build a string to display the word with guessed letters\nvar displayString=wordArray.reduce(function(acc,letter){if(letter===' '){return acc+' ';}else if(guesses.has(letter)){return acc+letter;}else{return acc+'_';}},'');// Check if the player has won (all letters have been guessed)\nvar hasWon=wordArray.every(function(letter){return guesses.has(letter)||letter===' ';});// Check if the player has lost (exceeded maximum incorrect guesses)\nvar hasLost=incorrectGuesses>=5;// Define the hangman ASCII art\nvar hangmanArt=['_______','|      |','|      O',' |     /|\\\\',' |     / \\\\','|       '];// Slice the hangman art to show only the relevant body parts\nvar visibleHangman=hangmanArt.slice(0,incorrectGuesses+1).join('\\n');// Handle a player's guess\nvar handleGuess=function handleGuess(event){// Ignore duplicate guesses\nvar letter=event.key.toLowerCase();if(guesses.has(letter)){return;}// Add the guess to the set of guesses\nvar newGuesses=new Set(guesses);newGuesses.add(letter);setGuesses(newGuesses);// Increment the number of incorrect guesses if the guess is incorrect\nif(!wordArray.includes(letter)){setIncorrectGuesses(incorrectGuesses+1);}// Convert the Set of guessed letters to a string\nvar guessedLettersString=Array.from(newGuesses).join('');setGuessedLetters(guessedLettersString);};return/*#__PURE__*/_jsxs(\"div\",{className:\"hangman-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"hangman-art\",children:visibleHangman}),/*#__PURE__*/_jsxs(\"div\",{className:\"middle-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stack-middle\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"prompt-text\",children:\"Was ist prompt?\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"guessed-letters\",children:[\"Guessed letters: \",guessedLetters]}),/*#__PURE__*/_jsx(\"div\",{className:\"hangman-word\",children:displayString})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"middle-bottom\",children:[!hasWon&&!hasLost&&/*#__PURE__*/_jsx(\"div\",{className:\"hangman-input-container\",children:/*#__PURE__*/_jsx(\"input\",{className:\"hangman-input\",type:\"text\",maxLength:\"1\",onKeyDown:function onKeyDown(e){return e.key.length===1&&handleGuess(e);},autoFocus:true})}),hasWon&&/*#__PURE__*/_jsx(\"p\",{className:\"game-over-message win\",children:\"You win!\"}),hasLost&&/*#__PURE__*/_jsx(\"p\",{className:\"game-over-message loss\",children:\"You lose!\"})]})]}),/*#__PURE__*/_jsx(\"div\",{})]});}export default Hangman;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Hangman","_ref","word","_useState","Set","_useState2","_slicedToArray","guesses","setGuesses","_useState3","_useState4","incorrectGuesses","setIncorrectGuesses","_useState5","_useState6","guessedLetters","setGuessedLetters","wordArray","toLowerCase","split","console","log","displayString","reduce","acc","letter","has","hasWon","every","hasLost","hangmanArt","visibleHangman","slice","join","handleGuess","event","key","newGuesses","add","includes","guessedLettersString","Array","from","className","children","type","maxLength","onKeyDown","e","length","autoFocus"],"sources":["/home/kaisj/projects/react_gitweb/src/components/Hangman.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../stylesheets/Hangman.css';\n\nfunction Hangman({ word }) {\n  const [guesses, setGuesses] = useState(new Set());\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0);\n  const [guessedLetters, setGuessedLetters] = useState('');\n\n  // Split the word into an array of letters and spaces\n  const wordArray = word.toLowerCase().split('');\n  console.log(wordArray)\n\n    // Build a string to display the word with guessed letters\n    const displayString = wordArray.reduce((acc, letter) => {\n        if (letter === ' ') {\n        return acc + ' ';\n        } else if (guesses.has(letter)) {\n        return acc + letter;\n        } else {\n        return acc + '_';\n        }\n    }, '');\n\n  // Check if the player has won (all letters have been guessed)\n  const hasWon = wordArray.every((letter) => guesses.has(letter) || letter === ' ');\n\n  // Check if the player has lost (exceeded maximum incorrect guesses)\n  const hasLost = incorrectGuesses >= 5;\n\n  // Define the hangman ASCII art\n  const hangmanArt = [\n    '_______',\n    '|      |',\n    '|      O',\n    ' |     /|\\\\',\n    ' |     / \\\\',\n    '|       ',\n  ];\n\n  // Slice the hangman art to show only the relevant body parts\n  const visibleHangman = hangmanArt.slice(0, incorrectGuesses + 1).join('\\n');\n\n\n  // Handle a player's guess\n  const handleGuess = (event) => {\n    // Ignore duplicate guesses\n    const letter = event.key.toLowerCase();\n    if (guesses.has(letter)) {\n      return;\n    }\n\n    // Add the guess to the set of guesses\n    const newGuesses = new Set(guesses);\n    newGuesses.add(letter);\n    setGuesses(newGuesses);\n\n    // Increment the number of incorrect guesses if the guess is incorrect\n    if (!wordArray.includes(letter)) {\n      setIncorrectGuesses(incorrectGuesses + 1);\n    }\n\n    // Convert the Set of guessed letters to a string\n    const guessedLettersString = Array.from(newGuesses).join('');\n    setGuessedLetters(guessedLettersString);\n  };\n\n  return (\n    <div className=\"hangman-container\">\n      <div className=\"hangman-art\">{visibleHangman}</div>\n      <div className='middle-container'>\n        <div className='stack-middle'>\n            <div className=\"prompt-text\">Was ist prompt?</div> \n            <div className='guessed-letters'>Guessed letters: {guessedLetters}</div>\n            <div className=\"hangman-word\">\n                {displayString}\n            </div>\n        </div>\n        <div className='middle-bottom'>\n            {!hasWon && !hasLost && (\n                <div className=\"hangman-input-container\">\n                <input\n                    className=\"hangman-input\"\n                    type=\"text\"\n                    maxLength=\"1\"\n                    onKeyDown={(e) => e.key.length === 1 && handleGuess(e)}\n                    autoFocus\n                />\n                </div>\n            )}\n            {hasWon && <p className='game-over-message win'>You win!</p>}\n            {hasLost && <p className='game-over-message loss'>You lose!</p>}\n        </div>\n      </div>\n      <div></div>\n    </div>\n  );\n}\n\nexport default Hangman;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}